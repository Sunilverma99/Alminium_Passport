{"abi":[{"type":"function","name":"GOVERNMENT_ROLE","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"MANUFACTURER_ROLE","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"MINER_ROLE","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"RECYCLER_ROLE","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"SUPPLIER_ROLE","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"createAndValidateSignature","inputs":[{"name":"hash","type":"bytes32","internalType":"bytes32"},{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"signer","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"hasRole","inputs":[{"name":"role","type":"bytes32","internalType":"bytes32"},{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isAuthorizedSigner","inputs":[{"name":"signer","type":"address","internalType":"address"},{"name":"requiredRole","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"recoverSigner","inputs":[{"name":"messageHash","type":"bytes32","internalType":"bytes32"},{"name":"signature","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"pure"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"GOVERNMENT_ROLE()":"9cbed582","MANUFACTURER_ROLE()":"965288b0","MINER_ROLE()":"6394f6e6","RECYCLER_ROLE()":"bf313778","SUPPLIER_ROLE()":"a29508fc","createAndValidateSignature(bytes32,bytes,address)":"88dd23db","hasRole(bytes32,address)":"91d14854","isAuthorizedSigner(address,bytes32)":"19892fd4","recoverSigner(bytes32,bytes)":"97aba7f9"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"GOVERNMENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANUFACTURER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECYCLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPPLIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"createAndValidateSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"requiredRole\",\"type\":\"bytes32\"}],\"name\":\"isAuthorizedSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the SignatureManager contract. Note: The `hash` provided in functions is assumed to be an EIP\\u2011712 digest,       computed (for example) using OpenZeppelin's _hashTypedDataV4, so no legacy prefix is applied.\",\"kind\":\"dev\",\"methods\":{\"MANUFACTURER_ROLE()\":{\"details\":\"Returns the manufacturer role identifier.\"},\"createAndValidateSignature(bytes32,bytes,address)\":{\"details\":\"Validates if a signature was produced by the provided signer.\",\"params\":{\"hash\":\"The EIP\\u2011712 message digest.\",\"signature\":\"The signature to validate.\",\"signer\":\"The address of the expected signer.\"},\"returns\":{\"_0\":\"True if the signature is valid and the signer is authorized.\"}},\"hasRole(bytes32,address)\":{\"details\":\"Checks if an account has a specific role.\",\"params\":{\"account\":\"The account address.\",\"role\":\"The role identifier.\"},\"returns\":{\"_0\":\"True if the account has the role.\"}},\"isAuthorizedSigner(address,bytes32)\":{\"details\":\"Checks whether a signer possesses the required role.\",\"params\":{\"requiredRole\":\"The role needed for the operation.\",\"signer\":\"The signer address.\"}},\"recoverSigner(bytes32,bytes)\":{\"details\":\"Recovers the signer from a given EIP\\u2011712 message digest and signature.\",\"params\":{\"messageHash\":\"The EIP\\u2011712 message digest.\",\"signature\":\"The signature for the message digest.\"},\"returns\":{\"_0\":\"The address of the recovered signer.\"}}},\"title\":\"ISignatureManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/ISignatureManager.sol\":\"ISignatureManager\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"],\"viaIR\":true},\"sources\":{\"src/interfaces/ISignatureManager.sol\":{\"keccak256\":\"0x447242df53d051dfcea7e51b98b01aad02ceb3fcd822fb6a87784e9186bb813b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41f0814620a70b1db3bef54ecb9dfbdb7b17f34cf24227b2d1a9efb07cad3449\",\"dweb:/ipfs/QmSmP4zSuyrkSwukyF5npfL9FMvMxoSzbBQM9vd6KBa9eR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"GOVERNMENT_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"MANUFACTURER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"MINER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"RECYCLER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"SUPPLIER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"address","name":"signer","type":"address"}],"stateMutability":"view","type":"function","name":"createAndValidateSignature","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"signer","type":"address"},{"internalType":"bytes32","name":"requiredRole","type":"bytes32"}],"stateMutability":"view","type":"function","name":"isAuthorizedSigner","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"messageHash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"stateMutability":"pure","type":"function","name":"recoverSigner","outputs":[{"internalType":"address","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"MANUFACTURER_ROLE()":{"details":"Returns the manufacturer role identifier."},"createAndValidateSignature(bytes32,bytes,address)":{"details":"Validates if a signature was produced by the provided signer.","params":{"hash":"The EIPâ€‘712 message digest.","signature":"The signature to validate.","signer":"The address of the expected signer."},"returns":{"_0":"True if the signature is valid and the signer is authorized."}},"hasRole(bytes32,address)":{"details":"Checks if an account has a specific role.","params":{"account":"The account address.","role":"The role identifier."},"returns":{"_0":"True if the account has the role."}},"isAuthorizedSigner(address,bytes32)":{"details":"Checks whether a signer possesses the required role.","params":{"requiredRole":"The role needed for the operation.","signer":"The signer address."}},"recoverSigner(bytes32,bytes)":{"details":"Recovers the signer from a given EIPâ€‘712 message digest and signature.","params":{"messageHash":"The EIPâ€‘712 message digest.","signature":"The signature for the message digest."},"returns":{"_0":"The address of the recovered signer."}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/solmate/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/ISignatureManager.sol":"ISignatureManager"},"evmVersion":"shanghai","libraries":{},"viaIR":true},"sources":{"src/interfaces/ISignatureManager.sol":{"keccak256":"0x447242df53d051dfcea7e51b98b01aad02ceb3fcd822fb6a87784e9186bb813b","urls":["bzz-raw://41f0814620a70b1db3bef54ecb9dfbdb7b17f34cf24227b2d1a9efb07cad3449","dweb:/ipfs/QmSmP4zSuyrkSwukyF5npfL9FMvMxoSzbBQM9vd6KBa9eR"],"license":"MIT"}},"version":1},"id":62}